diff --git a/code/Decoder.cpp b/code/Decoder.cpp
index 7f2f6cc..89b7878 100644
--- a/code/Decoder.cpp
+++ b/code/Decoder.cpp
@@ -222,12 +222,31 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
         switch (funct3)
         {
         case 0b001: //SLLI
-        case 0b101: //SRLI SRAI TODO: add this later
+            type = OPER_TYPE_I;
+            name = OPER_NAME_SLLI;
+            executor = &(Executors::MainInstrExecutorSLLI);
+            break;
+        case 0b101:
+            switch (funct7) //SRLI SRAI TODO: add this later
+            {
+                case 0b0000000:
+                    type = OPER_TYPE_I;
+                    name = OPER_NAME_SRLI;
+                    executor = &(Executors::MainInstrExecutorSRLI);
+                    break;
+                case 0b0100000:
+                    type = OPER_TYPE_I;
+                    name = OPER_NAME_SRAI;
+                    executor = &(Executors::MainInstrExecutorSRAI);
+                    break;
+                default:
+                    print_and_raise_error(instr);
+            }
             print_and_raise_error(instr);
         case 0b000:
             type = OPER_TYPE_I;
             name = OPER_NAME_ADDI;
-            executor = &(Executors::MainInstrExecutorAUIPC);
+            executor = &(Executors::MainInstrExecutorADDI);
             break;
         case 0b010:
             type = OPER_TYPE_I;
@@ -267,9 +286,11 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
             {
             case 0b0000000:
                 name = OPER_NAME_ADD;
+                executor = &(Executors::MainInstrExecutorADD);
                 break;
             case 0b0100000:
                 name = OPER_NAME_SUB;
+                executor = &(Executors::MainInstrExecutorSUB);
                 break;
             default:
                 print_and_raise_error(instr);
@@ -280,6 +301,7 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
             {
             case 0b0000000:
                 name = OPER_NAME_SLL;
+                executor = &(Executors::MainInstrExecutorSLL);
                 break;
             default:
                 print_and_raise_error(instr);
@@ -290,6 +312,7 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
             {
             case 0b0000000:
                 name = OPER_NAME_SLT;
+                executor = &(Executors::MainInstrExecutorSLT);
                 break;
             default:
                 print_and_raise_error(instr);
@@ -300,6 +323,7 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
             {
             case 0b0000000:
                 name = OPER_NAME_SLTU;
+                executor = &(Executors::MainInstrExecutorSLTU);
                 break;
             default:
                 print_and_raise_error(instr);
@@ -310,6 +334,7 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
             {
             case 0b0000000:
                 name = OPER_NAME_XOR;
+                executor = &(Executors::MainInstrExecutorXOR);
                 break;
             default:
                 print_and_raise_error(instr);
@@ -333,6 +358,7 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
             {
             case 0b0000000:
                 name = OPER_NAME_OR;
+                executor = &(Executors::MainInstrExecutorOR);
                 break;
             default:
                 print_and_raise_error(instr);
@@ -343,6 +369,7 @@ void Decoder::recognize_oper(uint32_t opcode, uint32_t funct3, uint32_t funct7)
             {
             case 0b0000000:
                 name = OPER_NAME_AND;
+                executor = &(Executors::MainInstrExecutorAND);
                 break;
             default:
                 print_and_raise_error(instr);
diff --git a/code/Executors.cpp b/code/Executors.cpp
index 9285bcf..759dfc2 100644
--- a/code/Executors.cpp
+++ b/code/Executors.cpp
@@ -1,4 +1,14 @@
 #include "Executors.hpp"
+
+void Executors::MainInstrExecutorLUI(Oper *op, DE *de)
+{
+    (void)de;
+    OperU *oper = static_cast<OperU *>(op);
+    Register& rd = oper->get_rd_ref();
+    uint32_t imm = oper->get_imm();
+    uint32_t val = imm ;
+    rd.set_value(val);
+}
 void Executors::MainInstrExecutorAUIPC(Oper *op, DE *de)
 {
     OperU *oper = static_cast<OperU *>(op);
@@ -18,7 +28,6 @@ void Executors::MainInstrExecutorADDI(Oper *op, DE *de)
     uint64_t res = static_cast<uint64_t>(rs1.get_value()) + imm;
     rd.set_value(static_cast<uint32_t>(res));
 }
-
 void Executors::MainInstrExecutorSLTI(Oper *op, DE *de)
 {
     (void)de;
@@ -36,8 +45,6 @@ void Executors::MainInstrExecutorSLTI(Oper *op, DE *de)
     }
     rd.set_value(static_cast<uint32_t>(res));
 }
-
-
 void Executors::MainInstrExecutorSLTIU(Oper *op, DE *de)
 {
     (void)de;
@@ -55,16 +62,14 @@ void Executors::MainInstrExecutorSLTIU(Oper *op, DE *de)
     }
     rd.set_value(static_cast<uint32_t>(res));
 }
-
-
-void Executors::MainInstrExecutorANDI(Oper *op, DE *de)
+void Executors::MainInstrExecutorXORI(Oper *op, DE *de)
 {
     (void)de;
     uint32_t imm = op->get_imm();
     Register rs1 = op->get_rs1();
     Register& rd = op->get_rd_ref();
     uint32_t res;
-    res = rs1.get_value() & imm;
+    res = rs1.get_value() ^ imm;
     rd.set_value(res);
 }
 void Executors::MainInstrExecutorORI(Oper *op, DE *de)
@@ -77,25 +82,148 @@ void Executors::MainInstrExecutorORI(Oper *op, DE *de)
     res = rs1.get_value() | imm;
     rd.set_value(res);
 }
-void Executors::MainInstrExecutorXORI(Oper *op, DE *de)
+void Executors::MainInstrExecutorANDI(Oper *op, DE *de)
 {
     (void)de;
     uint32_t imm = op->get_imm();
     Register rs1 = op->get_rs1();
     Register& rd = op->get_rd_ref();
     uint32_t res;
-    res = rs1.get_value() ^ imm;
+    res = rs1.get_value() & imm;
     rd.set_value(res);
 }
-
-void Executors::MainInstrExecutorLUI(Oper *op, DE *de)
+void Executors::MainInstrExecutorSLLI(Oper *op, DE *de)
 {
     (void)de;
-    OperU *oper = static_cast<OperU *>(op);
+    OperI *oper = static_cast<OperI *>(op);
     Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
     uint32_t imm = oper->get_imm();
-    uint32_t val = imm ;
-    rd.set_value(val);
+    uint32_t shift = imm & 0b11111;
+    uint32_t res;
+    res = rs1.get_value() << shift;
+    rd.set_value(res);
+}
+void Executors::MainInstrExecutorSRLI(Oper *op, DE *de)
+{
+    (void)de;
+    OperI *oper = static_cast<OperI *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    uint32_t imm = oper->get_imm();
+    uint32_t shift = imm & 0b11111;
+    uint32_t res;
+    res = rs1.get_value() >> shift;
+    rd.set_value(res);
+}
+void Executors::MainInstrExecutorSRAI(Oper *op, DE *de)
+{
+    (void)de;
+    OperI *oper = static_cast<OperI *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    uint32_t imm = oper->get_imm();
+    uint32_t shift = imm & 0b11111;
+    int32_t res;
+    res = static_cast<int32_t>(rs1.get_value()) >> shift;
+    rd.set_value(static_cast<uint32_t>(res));
+}
+void Executors::MainInstrExecutorADD(Oper *op, DE *de)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res = rs1.get_value() + rs2.get_value();
+    rd.set_value(res);
+}
+void Executors::MainInstrExecutorSUB(Oper *op, DE *de)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res = rs1.get_value() - rs2.get_value();
+    rd.set_value(res);
+}
+void Executors::MainInstrExecutorSLL(Oper *op, DE *de)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res = rs1.get_value() << rs2.get_value();
+    rd.set_value(res);
+}
+void Executors::MainInstrExecutorSLT(Oper *op, DE *de)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res;
+    if(static_cast<int32_t>(rs1.get_value()) < static_cast<int32_t>(rs2.get_value()))
+    {
+        res = 1;
+    }
+    else
+    {
+        res = 0;
+    }
+    rd.set_value(static_cast<uint32_t>(res));
+}
+void Executors::MainInstrExecutorSLTU(Oper *op, DE *de) // Note, SLTU rd, x0, rs2 sets rd to 1 if rs2 is not equal to zero, otherwise sets rd to zero (assembler pseudo-op SNEZ rd, rs)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res;
+    if(static_cast<uint32_t>(rs1.get_value()) < static_cast<uint32_t>(rs2.get_value()))
+    {
+        res = 1;
+    }
+    else
+    {
+        res = 0;
+    }
+    rd.set_value(static_cast<uint32_t>(res));
+}
+void Executors::MainInstrExecutorXOR(Oper *op, DE *de)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res;
+    res = rs1.get_value() ^ rs2.get_value();
+    rd.set_value(res);
+}
+void Executors::MainInstrExecutorOR(Oper *op, DE *de)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res;
+    res = rs1.get_value() | rs2.get_value();
+    rd.set_value(res);
+}
+void Executors::MainInstrExecutorAND(Oper *op, DE *de)
+{
+    (void)de;
+    OperR *oper = static_cast<OperR *>(op);
+    Register& rd = oper->get_rd_ref();
+    Register rs1 = op->get_rs1();
+    Register rs2 = op->get_rs2();
+    uint32_t res;
+    res = rs1.get_value() & rs2.get_value();
+    rd.set_value(res);
 }
-
-
diff --git a/code/Executors.hpp b/code/Executors.hpp
index d79c279..442bdbe 100644
--- a/code/Executors.hpp
+++ b/code/Executors.hpp
@@ -3,14 +3,44 @@
 #include "Oper.hpp"
 namespace Executors
 {
-  void MainInstrExecutorAUIPC(Oper *op, DE *de);
   void MainInstrExecutorLUI(Oper *op, DE *de);
+  void MainInstrExecutorAUIPC(Oper *op, DE *de);
+  //void MainInstrExecutorJAL(Oper *op, DE *de);
+  //void MainInstrExecutorJALR(Oper *op, DE *de);
+  //void MainInstrExecutorBEQ(Oper *op, DE *de);
+  //void MainInstrExecutorBNE(Oper *op, DE *de);
+  //void MainInstrExecutorBLT(Oper *op, DE *de);
+  //void MainInstrExecutorBGE(Oper *op, DE *de);
+  //void MainInstrExecutorBLTU(Oper *op, DE *de);
+  //void MainInstrExecutorBGEU(Oper *op, DE *de);
+  //void MainInstrExecutorLB(Oper *op, DE *de);
+  //void MainInstrExecutorLH(Oper *op, DE *de);
+  //void MainInstrExecutorLW(Oper *op, DE *de);
+  //void MainInstrExecutorLBU(Oper *op, DE *de);
+  //void MainInstrExecutorLHU(Oper *op, DE *de);
+  //void MainInstrExecutorSB(Oper *op, DE *de);
+  //void MainInstrExecutorSH(Oper *op, DE *de);
+  //void MainInstrExecutorSW(Oper *op, DE *de);
   void MainInstrExecutorADDI(Oper *op, DE *de);
   void MainInstrExecutorSLTI(Oper *op, DE *de);
   void MainInstrExecutorSLTIU(Oper *op, DE *de);
-  void MainInstrExecutorANDI(Oper *op, DE *de);
-  void MainInstrExecutorORI(Oper *op, DE *de);
   void MainInstrExecutorXORI(Oper *op, DE *de);
+  void MainInstrExecutorORI(Oper *op, DE *de);
+  void MainInstrExecutorANDI(Oper *op, DE *de);
+  void MainInstrExecutorSLLI(Oper *op, DE *de);
+  void MainInstrExecutorSRLI(Oper *op, DE *de);
+  void MainInstrExecutorSRAI(Oper *op, DE *de);
+  void MainInstrExecutorADD(Oper *op, DE *de);
+  void MainInstrExecutorSUB(Oper *op, DE *de);
+  void MainInstrExecutorSLL(Oper *op, DE *de);
+  void MainInstrExecutorSLT(Oper *op, DE *de);
+  void MainInstrExecutorSLTU(Oper *op, DE *de);
+  void MainInstrExecutorXOR(Oper *op, DE *de);
+  //void MainInstrExecutorSRL(Oper *op, DE *de);
+  //void MainInstrExecutorSRA(Oper *op, DE *de);
+  void MainInstrExecutorOR(Oper *op, DE *de);
+  void MainInstrExecutorAND(Oper *op, DE *de);
+
 }
 
 #endif //MARLIN_EXECUTORS_HPP
diff --git a/code/cmake-build-debug/CMakeFiles/Marlin.dir/CXX.includecache b/code/cmake-build-debug/CMakeFiles/Marlin.dir/CXX.includecache
index 6e3d124..3f613a9 100644
--- a/code/cmake-build-debug/CMakeFiles/Marlin.dir/CXX.includecache
+++ b/code/cmake-build-debug/CMakeFiles/Marlin.dir/CXX.includecache
@@ -16,9 +16,53 @@ cstdint
 Log.hpp
 /Users/ekaterina/Documents/intel/Project/Marlin/code/Log.hpp
 
-/Users/ekaterina/Documents/intel/Project/Marlin/code/HazartUnit.cpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Decoder.cpp
+Decoder.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Decoder.hpp
+Marlin.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Marlin.hpp
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Decoder.hpp
+Oper.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Oper.hpp
+Log.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Log.hpp
+Config.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Config.hpp
+Executors.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Executors.hpp
 HazartUnit.hpp
 /Users/ekaterina/Documents/intel/Project/Marlin/code/HazartUnit.hpp
+vector
+-
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/ElfMarlin.hpp
+err.h
+-
+fcntl.h
+-
+gelf.h
+-
+cstdio
+-
+cstdint
+-
+cstdlib
+-
+unistd.h
+-
+vector
+-
+MMU.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/MMU.hpp
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Executors.cpp
+Executors.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Executors.hpp
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Executors.hpp
+Oper.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Oper.hpp
 
 /Users/ekaterina/Documents/intel/Project/Marlin/code/HazartUnit.hpp
 Config.hpp
@@ -36,6 +80,60 @@ iostream
 fstream
 -
 
+/Users/ekaterina/Documents/intel/Project/Marlin/code/MMU.hpp
+Memory.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Memory.hpp
+Config.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Config.hpp
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Main.cpp
+Marlin.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Marlin.hpp
+Config.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Config.hpp
+string
+-
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Marlin.cpp
+Marlin.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Marlin.hpp
+iostream
+-
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Marlin.hpp
+string
+-
+ElfMarlin.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/ElfMarlin.hpp
+MMU.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/MMU.hpp
+Oper.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Oper.hpp
+Config.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Config.hpp
+Decoder.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Decoder.hpp
+Cell.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Cell.hpp
+HazartUnit.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/HazartUnit.hpp
+
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Memory.hpp
+cstdint
+-
+vector
+-
+cstdlib
+-
+iostream
+-
+cstring
+-
+Config.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Config.hpp
+Log.hpp
+/Users/ekaterina/Documents/intel/Project/Marlin/code/Log.hpp
+
 /Users/ekaterina/Documents/intel/Project/Marlin/code/Oper.hpp
 cstdint
 -
diff --git a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Decoder.cpp.o b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Decoder.cpp.o
index 711ab95..807b766 100644
Binary files a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Decoder.cpp.o and b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Decoder.cpp.o differ
diff --git a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Executors.cpp.o b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Executors.cpp.o
index c127680..136b46d 100644
Binary files a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Executors.cpp.o and b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Executors.cpp.o differ
diff --git a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Main.cpp.o b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Main.cpp.o
index d4e3f29..6c97ec9 100644
Binary files a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Main.cpp.o and b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Main.cpp.o differ
diff --git a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Marlin.cpp.o b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Marlin.cpp.o
index 29868f9..852b88d 100644
Binary files a/code/cmake-build-debug/CMakeFiles/Marlin.dir/Marlin.cpp.o and b/code/cmake-build-debug/CMakeFiles/Marlin.dir/Marlin.cpp.o differ
